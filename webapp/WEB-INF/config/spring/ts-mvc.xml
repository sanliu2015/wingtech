<?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		   xmlns:p="http://www.springframework.org/schema/p"
           xmlns:mvc="http://www.springframework.org/schema/mvc" 
		   xmlns:tx="http://www.springframework.org/schema/tx"
           xmlns:aop="http://www.springframework.org/schema/aop" 
		   xmlns:context="http://www.springframework.org/schema/context"
           xmlns:util="http://www.springframework.org/schema/util"
           xsi:schemaLocation="http://www.springframework.org/schema/beans 
		                      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                              http://www.springframework.org/schema/context 
							  http://www.springframework.org/schema/context/spring-context-4.0.xsd 
                              http://www.springframework.org/schema/mvc 
							  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
							  http://www.springframework.org/schema/aop
                              http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                              http://www.springframework.org/schema/tx 
							  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                              http://www.springframework.org/schema/util 
							  http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!-- 打开Spring的Annotation的支持 -->  
	<context:annotation-config />  
	<!-- 扫描注解配置的包 -->
    <context:component-scan base-package="com.ts.*" />
	<mvc:resources mapping="/img/**" location="/img/"/>  
    <mvc:resources mapping="/js/**" location="/js/"/>  
    <mvc:resources mapping="/css/**" location="/css/"/>  
    <mvc:resources mapping="/html/**" location="/html/"/> 
    <!-- 基于注释的事务，当注释中发现@Transactional时，使用id为“transactionManager”的事务管理器 -->
    <!-- 如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器 -->
    <tx:annotation-driven transaction-manager="txManager" />
    <aop:aspectj-autoproxy proxy-target-class="true" /> 
    <!-- 设置spring的mvc用注解
    <mvc:annotation-driven /> -->
    <mvc:annotation-driven>
    <mvc:message-converters register-defaults="true">
      <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">  
			<list>  
				<value>text/html;charset=UTF-8</value>  
				<value>application/json;charset=UTF-8</value>  
			</list>  
		</property>  
		<property name="features">  
			<array>  
				<value>QuoteFieldNames</value>  
				<value>WriteMapNullValue</value>  
			</array>  
		</property>  
      </bean>
    </mvc:message-converters>
  </mvc:annotation-driven>
    <!-- 设置handler的映射方式，前面注解是其中一种 --> 
	<bean id="defaultAnnotationHandlerMapping"
          class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"> 
	</bean>
    <bean id="annotationMethodHandlerAdapter"
          class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" >
		  <property name="cacheSeconds" value="0" /> 
		  <property name="synchronizeOnSession" value="true" /> <!-- 支持session线性安全 -->
		 <!--<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
				<ref bean="mappingFastJsonHttpMessageConverter" />
			</list>
		</property> json转换器 -->
	</bean>
<!--启动Spring MVC的注解功能，完成请求和注解POJO的映射并且设置ResponseBody返回编码 -->
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
    <property name="messageConverters">  
         <list>  
             <bean class = "org.springframework.http.converter.StringHttpMessageConverter"> 
                <constructor-arg>
                    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                        <property name="targetClass" value="java.nio.charset.Charset" />
                       <property name="targetMethod" value="forName"/>
                       <property name="arguments" value="UTF-8"/>
                    </bean>
                </constructor-arg>
				 
            </bean>  
         </list>  
   </property> 
</bean>

    <!-- 设置试图的解析ViewResolver -->
    <bean id="viewResolver"  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
         <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/pages/" />
        <property name="suffix" value=".jsp" />
    </bean>
	 <!-- 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 -->   
    
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
		<property name="maxUploadSize">
			<value>32505856</value><!-- 上传文件大小限制为31M，31*1024*1024 -->
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
	<!-- 异常处理类 -->
	<bean id="exceptionHandler" class="com.ts.core.common.exception.CoreExceptionHandler" /> 
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="500"></property> 
		<property name="defaultStatusCode" value="404"></property> 
		<property name="statusCodes">
			<props>
				<prop key="error">500</prop>  
				<prop key="error1">404</prop>  
				<prop key="error1">400</prop>   
			</props>
		</property>
		<!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->     
         <property name="warnLogCategory" value="WARN"></property>       
		<property name="exceptionMappings">
			<props>
				<!-- 这里你可以根据需要定义N多个错误异常转发 -->
				<prop key="java.sql.SQLException">core/common/exception/ShowSysError</prop> 
				<prop key="org.springframework.web.bind.ServletRequestBindingException">core/common/exception/ShowSysError</prop>
				<prop key="java.lang.IllegalArgumentException">core/common/exception/ShowSysError</prop>
				<prop key="org.springframework.validation.BindException">core/common/exception/ShowSysError</prop>  
				<prop key="BindException">core/common/exception/ShowSysError</prop>
				<prop key="java.lang.RuntimeException">core/common/exception/ShowError</prop>
				<prop key="java.lang.Exception">core/common/exception/ShowError</prop> 
			</props>
		</property>
	</bean>
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.ts.core.interceptors.EncodingInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.ts.core.interceptors.AuthInterceptor">
				<property name="filterUrls">
					<list>
						<value>/core/userService/login.do</value> 
						<value>/index.do</value>
						<value>/core/userService/checkLogin.do</value>
						<value>/app/appService/json/checkAppLogin.do</value>
						<value>/app/appService/stream/downloadclient.do</value>
						<value>/core/downloadFileService/stream/downloadFile.do</value>
					</list>
				</property>
				<property name="loginUrls">
					<list>
						<value>/core/userService/login.do</value>
						<value>/pages/app/index.jsp</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>